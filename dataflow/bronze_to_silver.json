{
	"name": "bronze_to_silver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_movie_bronze_parquet",
						"type": "DatasetReference"
					},
					"name": "bronzeInput"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_movie_genre_junction_parquet",
						"type": "DatasetReference"
					},
					"name": "movieGenreJunctionSink"
				},
				{
					"dataset": {
						"referenceName": "ds_genre_lookup_parquet",
						"type": "DatasetReference"
					},
					"name": "silverGenreLookupSink"
				},
				{
					"dataset": {
						"referenceName": "ds_language_lookup_parquet",
						"type": "DatasetReference"
					},
					"name": "silverLanguageLookupOutput"
				},
				{
					"dataset": {
						"referenceName": "ds_movie_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filterNew"
				},
				{
					"name": "parseMovieColumn"
				},
				{
					"name": "silverReady"
				},
				{
					"name": "copyMovieColumn"
				},
				{
					"name": "genreExpandPrep"
				},
				{
					"name": "movieGenreJunction"
				},
				{
					"name": "genreLookupSilver"
				},
				{
					"name": "genreLookupPrep"
				},
				{
					"name": "selectOriginalLanguage"
				},
				{
					"name": "createSurrogateKey"
				},
				{
					"name": "groupByLanguage"
				},
				{
					"name": "selectDistinctLanguage"
				},
				{
					"name": "adjustColumnOrder"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filterCleanData"
				},
				{
					"name": "filterQuarantineData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          datasource as string,",
				"          ingesttime as timestamp,",
				"          movie as string,",
				"          status as string,",
				"          p_ingestdate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> bronzeInput",
				"bronzeInput filter(status == 'new') ~> filterNew",
				"copyMovieColumn parse(movie_value = movie_value ? (Id as integer,",
				"          Title as string,",
				"          Overview as string,",
				"          Tagline as string,",
				"          Budget as float,",
				"          Revenue as float,",
				"          ImdbUrl as string,",
				"          TmdbUrl as string,",
				"          PosterUrl as string,",
				"          BackdropUrl as string,",
				"          OriginalLanguage as string,",
				"          ReleaseDate as date,",
				"          RunTime as integer,",
				"          Price as float,",
				"          CreatedDate as date,",
				"          genres as (id as integer,",
				"     name as string)[]),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parseMovieColumn",
				"parseMovieColumn select(mapColumn(",
				"          movie,",
				"          Id = movie_value.Id,",
				"          Title = movie_value.Title,",
				"          Overview = movie_value.Overview,",
				"          Tagline = movie_value.Tagline,",
				"          Budget = movie_value.Budget,",
				"          Revenue = movie_value.Revenue,",
				"          ImdbUrl = movie_value.ImdbUrl,",
				"          TmdbUrl = movie_value.TmdbUrl,",
				"          PosterUrl = movie_value.PosterUrl,",
				"          BackdropUrl = movie_value.BackdropUrl,",
				"          OriginalLanguage = movie_value.OriginalLanguage,",
				"          ReleaseDate = movie_value.ReleaseDate,",
				"          RunTime = movie_value.RunTime,",
				"          Price = movie_value.Price,",
				"          CreatedDate = movie_value.CreatedDate,",
				"          genres = movie_value.genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> silverReady",
				"filterNew derive(movie_value = movie) ~> copyMovieColumn",
				"silverReady select(mapColumn(",
				"          Id,",
				"          genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> genreExpandPrep",
				"genreExpandPrep foldDown(unroll(genres, genres),",
				"     mapColumn(",
				"          movie_id = Id,",
				"          genre_id = genres.id,",
				"          genre_name = genres.name",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> movieGenreJunction",
				"genreLookupPrep aggregate(groupBy(genre_id),",
				"     genre_name = max(genre_name)) ~> genreLookupSilver",
				"movieGenreJunction select(mapColumn(",
				"          genre_id,",
				"          genre_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> genreLookupPrep",
				"silverReady select(mapColumn(",
				"          OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOriginalLanguage",
				"selectDistinctLanguage keyGenerate(output(language_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> createSurrogateKey",
				"selectOriginalLanguage aggregate(groupBy(OriginalLanguage),",
				"     OriginalLanguage2 = max(OriginalLanguage)) ~> groupByLanguage",
				"groupByLanguage select(mapColumn(",
				"          OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDistinctLanguage",
				"createSurrogateKey select(mapColumn(",
				"          language_id,",
				"          OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> adjustColumnOrder",
				"silverReady, createSurrogateKey join(silverReady@OriginalLanguage == selectDistinctLanguage@OriginalLanguage,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          Tagline,",
				"          Budget,",
				"          Revenue,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          language_id,",
				"          ReleaseDate,",
				"          RunTime,",
				"          Price,",
				"          p_CreatedDate = CreatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(RunTime >= 0) ~> filterCleanData",
				"select1 filter(RunTime < 0) ~> filterQuarantineData",
				"movieGenreJunction sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> movieGenreJunctionSink",
				"genreLookupSilver sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> silverGenreLookupSink",
				"adjustColumnOrder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> silverLanguageLookupOutput",
				"filterCleanData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}